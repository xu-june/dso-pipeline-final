pipeline {
    agent {
        label 'jenkins-agent'
    }
    environment {
        PIPELINE_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        HARBOR_REGISTRY = 'harbor.dev.afsmtddso.com'
        HARBOR_PROJECT = 'jxu-harbor-project'
        DB_IMAGE_NAME = 'db'
    }
    stages {
        stage('Application repository') {
    	    steps {
            	echo "Cloning application repository"
            	sh 'git clone https://github.com/xu-june/afs-labs-student.git'
        	dir('afs-labs-student') {
            	    script {
               		env.DB_HASH = sh(script: 'git log --format=format:%h -1 --follow database/database.sql', returnStdout: true).trim()
        	    }
    	    	}
		withCredentials([usernamePassword(credentialsId: 'jxu-harbor-auth', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
    		    script {
        		env.BUILD_DB = sh(script: 'python check_harbor_db.py -h $DB_HASH -i $DB_IMAGE_NAME -r $HARBOR_REGISTRY -p $HARBOR_PROJECT -c ${USERNAME}:${PASSWORD}', returnStdout: true).trim()
    		    }
		}
	    }
	}
	stage('DB changes: true') {
 	    when {
      		environment name: 'BUILD_DB', value: 'true'
   	    }
   	    stages {
      		stage('Database docker build') {
          	    steps {
              		echo "Building database image"
			withCredentials([usernameColonPassword(credentialsId: 'jxu-harbor-auth', variable: 'HARBOR-AUTH')]) {
    			    script {
        			docker.build('$DB_IMAGE_NAME-$DB_HASH', '-f ./db/Dockerfile ./afs-labs-student')
        			docker.withRegistry('https://$HARBOR_REGISTRY', 'jxu-harbor-auth') {
            			    sh 'docker tag $DB_IMAGE_NAME-$DB_HASH $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$DB_HASH-$PIPELINE_HASH'
            			    sh 'docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$DB_HASH-$PIPELINE_HASH'
        			}
    			    }
			}
          	    }
          	    post {
          	    	always {
 			    echo "Clean local $DB_IMAGE_NAME image"
    			    script {
        			try {
            			    sh 'docker rmi $DB_IMAGE_NAME-$DB_HASH:latest'
            			    sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$DB_HASH-$PIPELINE_HASH'
        			} catch (err) {
            			    echo err.getMessage()
        			}
    			    }
			}
		    }
      		}
      		stage('Security scanning') {
          	    steps {
              		echo "Security scans"
              		// modify to scan database image
          	    }
      		}
      		stage('Deploy') {
          	    steps {
              		echo "Deployment stage"
          	    	sh 'kubectl -n jxu set image deployment/db-deployment db-deployment=$HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
		    }
      		}
   	    }
	}
    }
    post {
        cleanup {
    	    echo "Clean workspace"
    	    sh 'docker system prune -f'
    	    sh 'rm -rf .git ./*'
	}	 
    }
}
